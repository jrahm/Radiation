radiation.txt   Baus-style active syntax highlighting will make you snort at IDE's
radiation


         __________             .___.__        __  .__                ~
         \______   \_____     __| _/|__|____ _/  |_|__| ____   ____   ~
          |       _/\__  \   / __ | |  \__  \\   __\  |/  _ \ /    \  ~
          |    |   \ / __ \_/ /_/ | |  |/ __ \|  | |  (  <_> )   |  \ ~
          |____|_  /(____  /\____ | |__(____  /__| |__|\____/|___|  / ~
                 \/      \/      \/         \/                    \/  ~



                              Reference Manual~


==============================================================================
CONTENTS                                                   *radiation-contents*

    1.Intro...........................................|radiation-intro|
        1.1. Getting Started..........................|radiation-getstarted|
    2.C++.............................................|radiation-cpp|

==============================================================================
1. Intro                                                   *radiation-intro*

Radiation is a plugin for vim that does active syntax highlighting. That means that
Radiation will in the background parse the current file, looking for items to
highlight. Currently C, C++ and some JavaScript are the supported languages.

For example, if a cpp file contains:
    
    #include <cstdio>

    class MyClass {
        MyClass();

        int myfunction();
    };

    typedef int s32_t;

    typedef struct {
        int member
    } mystruct_t;


Then radiation will highlight all instances of MyClass, myfunction, s32_t, mystruct_t
and everything included from cstdio. The highlighting groups Radiation uses are 

------------------------------------------------------------------------------
1.1. Getting Started                                       *radiation-getstarted*

Radiation operates as a separate binary which is invoked from vim. This binary
is written in Haskell and may be installed using cabal (if you so will). This
will put the radiation binary on your $PATH and radiation will use that version.
Alternatively, if you do not have the haskell-platform installed (as most do not),
then there are pre-compiled builds available on Github
(see https://github.com/jrahm/Radiation/releases). These will ship with a separate
executable and will not pollute the $PATH. However, if there is a Radiation executable
on the path, Radiation will default to that one. To manually change the radiation
binary, use the environment g:radiation_binary to configure it.

It is recommended to build from source and use an executable on the $PATH *if* you
have haskell-platform with cabal installed. It makes it easier to update.


==============================================================================
2. C++                                                      *radiation-cpp*

The C++ highlighter is automatically invoked when a C++ file is opened

Highlighting groups for C++ are as follows:

    RadiationCppTypedef            - Highlight for a typedef. Defaultly links to Type
    RadiationCppClass              - Highlight for a C++ class. Defaultly links to Type
    RadiationCppStruct             - Highlight for a C++ struct. Defaultly links to Type
    RadiationCppEnum               - Highlight for a C++ enums. Defaultly links to Type
    RadiationCppUnion              - Highlight for a C++ union. Defaultly links to Type
    RadiationCppTemplateClass      - Highlight for a C++ class found in a template. Defaultly links to Type
    RadiationCppTemplateTypename   - Highlight for a C++ typename found in a template. Defaultly links to Type
    RadiationCppMemberFunction     - Highlight for a C++ member function. Defaultly links to Function
    RadiationCppFunction           - Highlight for a C++ non-member function. Defaultly links to Function
